// Generated by view binder compiler. Do not edit!
package com.android.hackathon2024_2.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ImageView;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.cardview.widget.CardView;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.android.hackathon2024_2.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ItemCareerSkillsBinding implements ViewBinding {
  @NonNull
  private final CardView rootView;

  @NonNull
  public final ImageView btnDetail;

  @NonNull
  public final CardView itemCareerSkills;

  @NonNull
  public final TextView questionTitle;

  @NonNull
  public final TextView skillDate;

  @NonNull
  public final TextView skillInfo;

  private ItemCareerSkillsBinding(@NonNull CardView rootView, @NonNull ImageView btnDetail,
      @NonNull CardView itemCareerSkills, @NonNull TextView questionTitle,
      @NonNull TextView skillDate, @NonNull TextView skillInfo) {
    this.rootView = rootView;
    this.btnDetail = btnDetail;
    this.itemCareerSkills = itemCareerSkills;
    this.questionTitle = questionTitle;
    this.skillDate = skillDate;
    this.skillInfo = skillInfo;
  }

  @Override
  @NonNull
  public CardView getRoot() {
    return rootView;
  }

  @NonNull
  public static ItemCareerSkillsBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ItemCareerSkillsBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.item_career_skills, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ItemCareerSkillsBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.btn_detail;
      ImageView btnDetail = ViewBindings.findChildViewById(rootView, id);
      if (btnDetail == null) {
        break missingId;
      }

      CardView itemCareerSkills = (CardView) rootView;

      id = R.id.question_title;
      TextView questionTitle = ViewBindings.findChildViewById(rootView, id);
      if (questionTitle == null) {
        break missingId;
      }

      id = R.id.skill_date;
      TextView skillDate = ViewBindings.findChildViewById(rootView, id);
      if (skillDate == null) {
        break missingId;
      }

      id = R.id.skill_info;
      TextView skillInfo = ViewBindings.findChildViewById(rootView, id);
      if (skillInfo == null) {
        break missingId;
      }

      return new ItemCareerSkillsBinding((CardView) rootView, btnDetail, itemCareerSkills,
          questionTitle, skillDate, skillInfo);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
